@page "/certificates/overview"

@using LetsEncrypt.Managers.Interfaces
@using LetsEncrypt.Model

@inject ICertificateEntryManager _certificateEntryManager

<h1>Certificates Overview</h1>

<p>List of all active certificates that need observation.</p>

@if (_certificateEntries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>Domain name</th>
                <th>File name</th>
                <th>Renewed</th>
                <th>Expires</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var certificateEntry in _certificateEntries)
            {
                <tr>
                    <td>@certificateEntry.DomainName</td>
                    <td>@certificateEntry.DomainName</td>
                    <td>@($"{Math.Round((DateTime.UtcNow - certificateEntry.RenewedOn).Value.TotalDays)} days ago")</td>
                    <td>@($"in {Math.Round((certificateEntry.ExpiresOn - DateTime.UtcNow).Value.TotalDays)} days")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private IList<CertificateEntry> _certificateEntries;

    protected override async Task OnInitializedAsync()
    {
        _certificateEntries = await _certificateEntryManager.GetCertificateEntries();
    }
}